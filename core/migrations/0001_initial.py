# Generated by Django 3.2.18 on 2023-04-27 10:04

import core.managers
import core.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('employee', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('doc', models.FileField(upload_to=core.models.upload_directory_file, verbose_name='Document')),
                ('broadcast', models.BooleanField(default=False, help_text='Diffuser cette annonce à tous les agents actifs par le biais de différents canaux.', verbose_name='Diffusé')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Mise à jour le')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créée le')),
            ],
            options={
                'verbose_name': 'Annonce',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('redirect_to', models.URLField(max_length=250, verbose_name='Rediriger vers')),
                ('visited', models.BooleanField(default=False, verbose_name='Visité')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Mise à jour le')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Créée le')),
                ('target', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.employee', verbose_name='Cible')),
            ],
            options={
                'verbose_name': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('employee', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
    ]
